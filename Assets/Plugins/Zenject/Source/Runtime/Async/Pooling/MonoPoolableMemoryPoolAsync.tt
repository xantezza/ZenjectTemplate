<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using JetBrains.Annotations;
using UnityEngine;

namespace Zenject
{
<#
    for (int paramCount = 0; paramCount <= 10; paramCount++)
    {
        var range = Enumerable.Range(0, paramCount);
        var tParams = string.Join(", ", range.Select(x => "TParam" + (x + 1)));
        var namedParams = string.Join(", ", range.Select(x => "TParam" + (x + 1) + " param" + (x + 1)));
        var separator = paramCount > 0 ? ", " : "";

        var names = string.Join(", ", range.Select(x => "param" + (x + 1)));
        var ipoolable = paramCount > 0 ? $"IPoolable<{tParams}>" : "IPoolable";
#>
    public class MonoPoolableMemoryPoolAsync<<#= tParams + separator #>TValue>
        : MemoryPoolAsync<<#= tParams + separator #>TValue>
        where TValue : Component, <#= ipoolable #>
    {
        Transform _originalParent;

        [Inject]
        public MonoPoolableMemoryPoolAsync()
        {
        }

        protected override void OnCreated(TValue item)
        {
            item.gameObject.SetActive(false);
            _originalParent = item.transform.parent;
        }

        protected override void OnDestroyed(TValue item)
        {
            GameObject.Destroy(item.gameObject);
        }

        protected override void OnDespawned(TValue item)
        {
            item.OnDespawned();
            item.gameObject.SetActive(false);

            if (item.transform.parent != _originalParent)
            {
                item.transform.SetParent(_originalParent, false);
            }
        }

        protected override void Reinitialize(<#= namedParams + separator #> TValue item)
        {
            item.gameObject.SetActive(true);
            item.OnSpawned(<#= names #>);
        }
    }
<#
    }
#>
}